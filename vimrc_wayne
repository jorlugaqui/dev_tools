"*******Wayne's vimrc********

"***Global settings***
set wildmenu " Use wildmenu - enhanced command-line completion, I've missed a lot:)
set wildmode=list:longest,full
set hidden " hide files instead of forcing save it when create a new file.
set number " Always show line numbers
set ruler  " Show [row],[col] and % of the currant cursor location
set paste  " Do not auto indent when paste
set autoindent
set smartindent
set copyindent    " copy the previous indentation on autoindenting
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set showmatch     " set show matching parenthesis
set autoread  " Automatically load file change
set nobackup
set noswapfile
set hlsearch
set incsearch " Focus on the search result as I type
set textwidth=100 " I got high resolution monitors!

" Fix vundle's git pull on windows
if has("win32") || has("gui_win32") || has("win64")
    set shell=\"C:\Program\ Files\ (x86)\Git\bin\bash.exe\"
    " Full screen
    au GUIEnter * simalt ~x "x on an English Windows version. n on a French one
endif

"***vundle - Vim Plugins***
filetype off "Required by vundle
set rtp+=~/.vim/bundle/Vundle.vim " Add vundle to Vim runtime path
call vundle#begin()
" let Vundle manage Vunble
Plugin 'gmarik/Vundle.vim'
" Original repos on github
Plugin 'flazz/vim-colorschemes'
"Plugin 'vim-scripts/Colour-Sampler-Pack.git'
Plugin 'scrooloose/nerdtree.git'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-dispatch'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'scrooloose/nerdcommenter.git'
Plugin 'mileszs/ack.vim.git'
Plugin 'wincent/Command-T.git'
Plugin 'MarcWeber/vim-addon-mw-utils.git'
Plugin 'tomtom/tlib_vim.git'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'tpope/vim-surround.git'
Plugin 'scrooloose/syntastic.git'
Plugin 'maksimr/vim-jsbeautify.git'
Plugin 'Shutnik/jshint2.vim'
"Plugin 'greyblake/vim-preview.git'
Plugin 'suan/vim-instant-markdown.git'
Plugin 'Valloric/YouCompleteMe'
" Notice: Need complete YCM installation below:
" cd ~/.vim/bundle/YouCompleteMe && ./install.sh --clang-completer --omnisharp-completer
"Plugin 'Lokaltog/powerline'
Plugin 'bling/vim-airline'
" https://github.com/Lokaltog/vim-powerline/tree/develop/fontpatcher#font-patching-guide
Plugin 'godlygeek/tabular'

" Languages
Plugin 'pangloss/vim-javascript.git'
Plugin 'marijnh/tern_for_vim' " cd ~/.vim/bundle/tern_for_vim && npm install
Plugin 'othree/html5.vim.git'
Plugin 'rstacruz/sparkup', {'rtp': 'vim'}
Plugin 'skammer/vim-css-color.git'
Plugin 'vim-ruby/vim-ruby.git'
Plugin 'tpope/vim-rails.git'
Plugin 'alfredodeza/pytest.vim' " pip install -U pytest
Plugin 'kchmck/vim-coffee-script.git'
Plugin 'tpope/vim-haml.git'
Plugin 'tpope/vim-cucumber.git'
Plugin 'skwp/vim-rspec.git'
Plugin 'tpope/vim-markdown'
Plugin 'groenewege/vim-less.git'
Plugin 'digitaltoad/vim-jade.git'
Plugin 'ekalinin/Dockerfile.vim'
" Plugin 'git://drupalcode.org/project/vimrc.git', {'rtp': 'bundle/vim-plugin-for-drupal/'}
Plugin 'nosami/Omnisharp'
" cd ~/.vim/bundle/Omnisharp/server && xbuild /p:Platform="Any CPU"
" Vim-scripts repos
"Plugin 'winmanager'
Plugin 'bufexplorer.zip'
Plugin 'Visual-Mark'
Plugin 'HTML-AutoCloseTag'
Plugin 'matchit.zip'
Plugin 'L9'
Plugin 'FuzzyFinder'
"Plugin 'vimlatex'
"Plugin 'TeX-PDF'
" Non github repos
"Plugin 'ssh://hg@bitbucket.org/ns9tks/vim-fuzzyfinder'
call vundle#end()

syntax on
filetype on
filetype indent plugin on

"***OS Specific***
" Identify platform {
    silent function! OSX()    " Mac OSX
        return has('macunix')
    endfunction
    silent function! LINUX()
        return has('unix') && !has('macunix') && !has('win32unix')
    endfunction
    silent function! WINDOWS()
        return  (has('win16') || has('win32') || has('win64'))
    endfunction
" }
"let os = system("echo -n \"$(uname)\"")
if OSX()
    Plugin 'copy-as-rtf'
    set guifont=Consolas:h16
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
    " On Mac, I need to remap Alt/Meta to Command key
    nnoremap <D-j> :m+<CR>==
    nnoremap <D-k> :m-2<CR>==
    inoremap <D-j> <Esc>:m+<CR>==gi
    inoremap <D-k> <Esc>:m-2<CR>==gi
    vnoremap <D-j> :m'>+<CR>gv=gv
    vnoremap <D-k> :m-2<CR>gv=gv
elseif LINUX()
    source ~/mswin.vim
    set guifont=Monospace\ 11
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
elseif WINDOWS()
    set guifont=Consolas:h14
    set wildignore+=tmp\*,*.swp,*.zip,*.exe,.git\*,.hg\*,.svn\*
endif
" All platforms
set wildignore+=*.o,*.obj,*.pyc

"***GUI settings***
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
" My favorate wombat theme and consolas font
colorscheme wombat
set background=dark

" Start VIM in MAX Window size
if has("gui_running")
  " GUI is running or is about to start.
  " Maximize gvim window.
  set lines=1200 columns=1600
  set cursorline
  "set transparency=5
  "au GUIEnter * simalt ~x "x on an English Windows version. n on a French one
else
  " This is console Vim.
  set paste
  set nonumber
  "if exists("+lines")
    "set lines=36
  "endif
  "if exists("+columns")
    "set columns=120
  "endif

  " Integrate with system clipboard
  set clipboard=unnamed
endif


" Spell check
:setlocal spelllang=en_us
" Auto save when loss focus. Refer: http://vim.wikia.com/wiki/Auto_save_files_when_focus_is_lost
set autowrite
:au FocusLost * silent! w

" Unicode
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
"setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif

" Let myself control the text folding behavior
set foldmethod=manual

" Don't show line numbers for output HTML code
let html_number_lines = 0


"***Shortcut mappings***
let mapleader="," " change the mapleader from \ to ','
nmap Y y$

" mapping to make movements operate on 1 screen line in wrap mode
function! ScreenMovement(movement)
   if &wrap
      return "g" . a:movement
   else
      return a:movement
   endif
endfunction
onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")
vnoremap <silent> <expr> j ScreenMovement("j")
vnoremap <silent> <expr> k ScreenMovement("k")

" Ctrl-J to break current line
nnoremap <NL> i<CR><ESC>
"nnoremap ; :     " I might do not use this because ; is really useful to redo the previous jump
" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
" Switch between splits windows. http://vim.wikia.com/wiki/Switch_between_Vim_window_splits_easily
"set wmh=0
"map <C-J> <C-W>j<C-W>_
"map <C-K> <C-W>k<C-W>_

" Switch/create tab(s) in quick - Really handy!
map <C-l> :tabn<CR>
map <C-h> :tabp<CR>
map <C-t> :tabnew<CR>
map <C-w> :tabclose<CR>

" Search for selected text, forwards or backwards. http://vim.wikia.com/wiki/Search_for_visually_selected_text
"vnoremap <silent> * :<C-U>
    "\let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    "\gvy/<C-R><C-R>=substitute(
    "\escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    "\gV:call setreg('"', old_reg, old_regtype)<CR>
"vnoremap <silent> # :<C-U>
    "\let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    "\gvy?<C-R><C-R>=substitute(
    "\escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    "\gV:call setreg('"', old_reg, old_regtype)<CR>
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>
" When I press <leader>r I can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

" Alternative using Tab/Shift-Tab (for gvim).
:vnoremap <Tab> >gv
:vnoremap <S-Tab> <gv

" WOW, this rocks!! This is a pretty good replace for default OmniCompletion
" shortcuts: C-X C-O.
" http://blogs.gnome.org/lharris/2008/07/20/code-completion-with-vim-7/
"function! SuperCleverTab()
    "if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
        "return "\<Tab>"
    "else
        "if &omnifunc != ''
            "return "\<C-X>\<C-O>"
        "elseif &dictionary != ''
            "return "\<C-K>"
        "else
            "return "\<C-N>"
        "endif
    "endif
"endfunction

"inoremap <Tab> <C-R>=SuperCleverTab()<cr>

" Shift-Enter to insert a new line before the cursor
" Ctrl-Enter to insert a new line after the cursor
map <S-Enter> O<Esc>
map <C-Enter> o<Esc>

" Quickly preview HTML files/link in browser
if OSX()
    map <leader>p :update<CR>:!open -a Safari %<CR><CR>
elseif WINDOWS()
    map <leader>p :update<CR>:silent !start c:\progra~1\intern~1\iexplore.exe file://%:p<CR>
    map <leader>i :update<CR>: !start c:\progra~1\intern~1\iexplore.exe <cWORD><CR>
endif

" Use ,-w to switch to next window
nmap <leader>w :wincmd w<CR>
nmap <leader>W :wincmd W<CR>

" Alt+j/k to move current line/selected lines up and down
nnoremap <A-j> :m+<CR>==
nnoremap <A-k> :m-2<CR>==
inoremap <A-j> <Esc>:m+<CR>==gi
inoremap <A-k> <Esc>:m-2<CR>==gi
vnoremap <A-j> :m'>+<CR>gv=gv
vnoremap <A-k> :m-2<CR>gv=gv

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,sc will toggle/untoggle spell checking
map <leader>sc :setlocal spell!<cr>
" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Utility Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Usage: select word I want to encode, go to command mode: call EncodeHTML()
function! EncodeHTML()
  silent s/&/\&amp;/eg
  silent s/</\&lt;/eg
  silent s/>/\&gt;/eg
endfunction

function! DecodeHTML()
  silent s/&lt;/</eg
  silent s/&gt;/>/eg
  silent s/&amp;/\&/eg
endfunction

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Shell command {
function! s:RunShellCommand(cmdline)
    botright new

    setlocal buftype=nofile
    setlocal bufhidden=delete
    setlocal nobuflisted
    setlocal noswapfile
    setlocal nowrap
    setlocal filetype=shell
    setlocal syntax=shell

    call setline(1, a:cmdline)
    call setline(2, substitute(a:cmdline, '.', '=', 'g'))
    execute 'silent $read !' . escape(a:cmdline, '%#')
    setlocal nomodifiable
    1
endfunction

command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"******** NERDtree********
map <F1> :NERDTreeToggle<CR>
"autocmd vimenter * NERDTree  " Starts NERDtree as soon as Vim starts
if has("gui_running")
    autocmd vimenter * if !argc() | NERDTree | endif " Starts NERDTree is no file was specified
endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif " Close Vim if NERDTree is the only window left
nmap <leader>nf :NERDTreeFind<CR>
let NERDTreeIgnore = ['\.o$', '\.out$', '\~$', '\.so$', '\.a$', '\.DS_Store$', '^tags$', '\.pyc$', '__pycache__$'] " Ignore files I never edit

"******** WinManager ********
"let g:winManagerWindowLayout='FileExplorer|TagList'
"nmap wm :WMToggle<CR>

"******** CommandT********
let g:CommandTWildIgnore=&wildignore . ",**/bower_components/*,*/node_modules/*,*.png,*.bmp,*.jpg,*.jpeg"

"******** Tagbar********
nmap tt :TagbarToggle<CR>
let g:tagbar_ctags_bin='/usr/local/bin/ctags'

"******** EasyMotion********
"let g:EasyMotion_leader_key = '<Leader>'

"******** FuzzyFind********
nmap <leader>ff :FufFile **/<CR>
nmap <leader>ft :FufFile<CR>
nmap <leader>fb :FufBuffer<CR>
nmap <leader>fl :FufLine<CR>
nmap <leader>fr :FufRenewCache<CR>

"******** Vim Airline********
" https://github.com/bling/vim-airline/wiki/Screenshots
" echo g:airline_theme_map or cd ~/.vim/bundle/vim-airline/autoload/airline/themes/
let g:airline_theme="wombat"
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_left_sep='â€º'  " Slightly fancier than '>'
let g:airline_right_sep='â€¹' " Slightly fancier than '<'

" Fancy symbols
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = 'Â»'
let g:airline_left_sep = 'â–¶'
let g:airline_right_sep = 'Â«'
let g:airline_right_sep = 'â—€'
let g:airline_symbols.linenr = 'âŠ'
let g:airline_symbols.linenr = 'â¤'
let g:airline_symbols.linenr = 'Â¶'
let g:airline_symbols.branch = 'âŽ‡'
let g:airline_symbols.paste = 'Ï'
let g:airline_symbols.paste = 'Ãž'
let g:airline_symbols.paste = 'âˆ¥'
let g:airline_symbols.whitespace = 'Îž'

"******** tabular********
nmap <leader>a= :Tabularize /=<CR>
vmap <leader>a= :Tabularize /=<CR>
nmap <leader>a: :Tabularize /:\zs<CR>
vmap <leader>a: :Tabularize /:\zs<CR>

"******** YouCompleteMe********
let g:ycm_collect_identifiers_from_tags_files = 1 " Let YCM read tags from Ctags file
let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
let g:ycm_seed_identifiers_with_syntax = 1 " Completion for programming language's keyword
let g:ycm_complete_in_comments = 1 " Completion in comments
let g:ycm_complete_in_strings = 1 " Completion in string
let g:ycm_path_to_python_interpreter = '/usr/local/bin/python'  " Needed sometime
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR> " Force a full, blocking compilation cycle
"let g:ycm_server_use_vim_stdout = 1
"let g:ycm_server_log_level = 'debug'

"******** ultisnip********
let g:UltiSnipsExpandTrigger       = "<c-j>"
let g:UltiSnipsJumpForwardTrigger  = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-p>"
let g:UltiSnipsListSnippets        = "<c-k>" "List possible snippets based on current file

"******** pytest********
autocmd FileType python map <C-A-F> <Esc>:Pytest file<CR>
autocmd FileType python map <C-A-C> <Esc>:Pytest class<CR>
autocmd FileType python map <C-A-M> <Esc>:Pytest method<CR>
autocmd FileType python map <C-A-D> <Esc>:Pytest method --pdb<CR>  
autocmd FileType python map <C-A-S> <Esc>:Pytest method -s<CR>
if OSX()
    " set macmeta " Only on MacVim GUI, treat the mac "option" key as Meta key
    autocmd FileType python map <C-M-F> <Esc>:Pytest file<CR>
    autocmd FileType python map <C-M-C> <Esc>:Pytest class<CR>
    autocmd FileType python map <C-M-M> <Esc>:Pytest method<CR>
    autocmd FileType python map <C-M-D> <Esc>:Pytest method --pdb<CR>  
    autocmd FileType python map <C-M-S> <Esc>:Pytest method -s<CR>
endif

"******** js-beautify********
autocmd FileType javascript noremap <buffer> <A-=> :call JsBeautify()<CR>
autocmd FileType css noremap <buffer> <A-=> :call CSSBeautify()<CR>
autocmd FileType html noremap <buffer> <A-=> :call HtmlBeautify()<CR>
autocmd FileType javascript vnoremap <buffer>  <A-=> :call RangeJsBeautify()<cr>
autocmd FileType html vnoremap <buffer> <A-=> :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <A-=> :call RangeCSSBeautify()<cr>

"******** lateX********
"set shellslash
"set grepprg=grep\ -nH\ $*
"let g:tex_flavor='latex'
"autocmd FileType tex set sw=2
" TIP: if you write your \label's as \label{fig:something}, then if you
" type in \ref{fig: and press <C-n> you will automatically cycle through
" all the figure labels. Very useful!


"***Language specified***
" shell (tab width 2 chr)
autocmd FileType sh set sw=2
autocmd FileType sh set ts=2
autocmd FileType sh set sts=2
autocmd FileType sh map <buffer> <C-S-e> :w<CR>:!/bin/sh % <CR>
" ruby (tab width 2 chr)
autocmd FileType ruby set sw=2
autocmd FileType ruby set ts=2
autocmd FileType ruby set sts=2
autocmd FileType ruby map <buffer> <C-S-e> :w<CR>:!/usr/bin/env ruby % <CR>
" HTML (tab width 2 chr, no wrapping)
autocmd FileType html,htmldjango set sw=2
autocmd FileType html,htmldjango set ts=2
autocmd FileType html,htmldjango set sts=2
autocmd FileType html,htmldjango set textwidth=0
" Python (tab width 4 chr)
autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4
autocmd FileType python map <buffer> <C-S-e> :w<CR>:!/usr/bin/env python % <CR>
" Note: the below line will override CommandT's shortcut: CommandTMRU
autocmd FileType python nnoremap <leader>b Oimport pdb; pdb.set_trace()<Esc>
" CSS (tab width 2 chr)
autocmd FileType css set sw=2
autocmd FileType css set ts=2
autocmd FileType css set sts=2
" JavaScript (tab width 4 chr)
autocmd FileType javascript set sw=4
autocmd FileType javascript set ts=4
autocmd FileType javascript set sts=4
autocmd FileType javascript map <buffer> <C-S-e> :w<CR>:!/usr/bin/env node % <CR>
" Php (tab width 2 chr)
autocmd FileType php set sw=2
autocmd FileType php set ts=2
autocmd FileType php set sts=2
" Cucumber (tab width 2 chr)
autocmd FileType Cucumber set sw=2
autocmd FileType Cucumber set ts=2
autocmd FileType Cucumber set sts=2
" CoffeeScript
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" Setup Omnicompletion
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
"improve autocomplete menu color
highlight Pmenu ctermbg=238 gui=bold

" Turn on javascript folding
"let b:javascript_fold=1
" Enabling javascript support for dom,html and css
let javascript_enable_domhtmlcss=1

" Cscope
"if has('cscope')
  "set cscopetag cscopeverbose

  "if has('quickfix')
    "set cscopequickfix=s-,c-,d-,i-,t-,e-
  "endif

  "cnoreabbrev csa cs add
  "cnoreabbrev csf cs find
  "cnoreabbrev csk cs kill
  "cnoreabbrev csr cs reset
  "cnoreabbrev css cs show
  "cnoreabbrev csh cs help

  "command -nargs=0 Cscope cs add $VIMSRC/src/cscope.out $VIMSRC/src
"endif


" System related
" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup

" My custom snips:)
iab wy Wayne Ye
iab wycom http://WayneYe.com
iab vo http://www.vim.org
